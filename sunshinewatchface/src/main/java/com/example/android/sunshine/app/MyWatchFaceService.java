/*
 * Copyright (C) 2014 The Android Open Source Project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Basic watch face app for Android Wear to accompany the sunshine app.
 * The copyright was left above because the beginning of the code was
 * auto-generated by selecting a watch face module. Not sure if it is necessary
 * still since I heavily edited it.
 *
 * Last edited by Dillon Connolly on 4/4/16
 */

package com.example.android.sunshine.app;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.res.Resources;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.graphics.Color;
import android.graphics.Paint;
import android.graphics.Rect;
import android.graphics.Typeface;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.NonNull;
import android.support.wearable.watchface.CanvasWatchFaceService;
import android.support.wearable.watchface.WatchFaceStyle;
import android.util.Log;
import android.view.SurfaceHolder;
import android.view.WindowInsets;

import com.google.android.gms.common.ConnectionResult;
import com.google.android.gms.common.api.GoogleApiClient;
import com.google.android.gms.wearable.Asset;
import com.google.android.gms.wearable.DataApi;
import com.google.android.gms.wearable.DataEvent;
import com.google.android.gms.wearable.DataEventBuffer;
import com.google.android.gms.wearable.DataMapItem;
import com.google.android.gms.wearable.PutDataMapRequest;
import com.google.android.gms.wearable.Wearable;

import java.io.InputStream;
import java.lang.ref.WeakReference;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import java.util.concurrent.TimeUnit;

/**
 * Digital watch face with seconds. In ambient mode, the seconds aren't displayed. On devices with
 * low-bit ambient mode, the text is drawn without anti-aliasing in ambient mode.
 */
public class MyWatchFaceService extends CanvasWatchFaceService {
    private static final String LOG_TAG = MyWatchFaceService.class.getSimpleName();

    private static final Typeface NORMAL_TYPEFACE =
            Typeface.create(Typeface.SANS_SERIF, Typeface.NORMAL);

    /**
     * Update rate in milliseconds for interactive mode. We update once a second since seconds are
     * displayed in interactive mode.
     */
    private static final long INTERACTIVE_UPDATE_RATE_MS = TimeUnit.SECONDS.toMillis(1);

    /**
     * Handler message id for updating the time periodically in interactive mode.
     */
    private static final int MSG_UPDATE_TIME = 0;

    @Override
    public Engine onCreateEngine() {
        return new Engine();
    }

    private static class EngineHandler extends Handler {
        private final WeakReference<MyWatchFaceService.Engine> mWeakReference;

        public EngineHandler(MyWatchFaceService.Engine reference) {
            mWeakReference = new WeakReference<>(reference);
        }

        @Override
        public void handleMessage(Message msg) {
            MyWatchFaceService.Engine engine = mWeakReference.get();
            if (engine != null) {
                switch (msg.what) {
                    case MSG_UPDATE_TIME:
                        engine.handleUpdateTimeMessage();
                        break;
                }
            }
        }
    }

    private class Engine extends CanvasWatchFaceService.Engine implements
            DataApi.DataListener, GoogleApiClient.ConnectionCallbacks, GoogleApiClient.OnConnectionFailedListener {
        final Handler mUpdateTimeHandler = new EngineHandler(this);
        boolean mRegisteredTimeZoneReceiver = false;
        Paint mBackgroundPaint;
        Paint mTimeTextPaint;
        Paint mDateTextPaint;
        Paint mHiTempTextPaint;
        Paint mLoTempTextPaint;
        boolean mAmbient;
        boolean mUseSeconds;
        Calendar mCalendar;
        Bitmap mWeatherBitmap;
        Double mTemperatureHi;
        Double mTemperatureLo;
        boolean isMetric;
        boolean isRound;

        final BroadcastReceiver mTimeZoneReceiver = new BroadcastReceiver() {
            @Override
            public void onReceive(Context context, Intent intent) {
                mCalendar.setTimeZone(TimeZone.getDefault());
                invalidate();
            }
        };
        int mTapCount;

        float mXOffset;
        float mYOffset;

        GoogleApiClient mGoogleApiClient = new GoogleApiClient.Builder(MyWatchFaceService.this)
                .addConnectionCallbacks(this)
                .addOnConnectionFailedListener(this)
                .addApi(Wearable.API)
                .build();

        /**
         * Whether the display supports fewer bits for each color in ambient mode. When true, we
         * disable anti-aliasing in ambient mode.
         */
        boolean mLowBitAmbient;

        @Override
        public void onCreate(SurfaceHolder holder) {
            super.onCreate(holder);

            setWatchFaceStyle(new WatchFaceStyle.Builder(MyWatchFaceService.this)
                    .setCardPeekMode(WatchFaceStyle.PEEK_MODE_VARIABLE)
                    .setBackgroundVisibility(WatchFaceStyle.BACKGROUND_VISIBILITY_INTERRUPTIVE)
                    .setShowSystemUiTime(false)
                    .setAcceptsTapEvents(true)
                    .build());
            Resources resources = MyWatchFaceService.this.getResources();
            mYOffset = resources.getDimension(R.dimen.digital_y_offset);

            mBackgroundPaint = new Paint();
            mBackgroundPaint.setColor(resources.getColor(R.color.background_1));

            mTimeTextPaint = new Paint();
            mTimeTextPaint = createTextPaint(resources.getColor(R.color.text_1));

            mDateTextPaint = new Paint();
            mDateTextPaint = createTextPaint(resources.getColor(R.color.text_2));
            mDateTextPaint.setTextSize(4);
            mDateTextPaint.setTextScaleX((float)(0.9));

            mHiTempTextPaint = new Paint();
            mHiTempTextPaint = createTextPaint(resources.getColor(R.color.text_1));
            mHiTempTextPaint.setTextSize(6);

            mLoTempTextPaint = new Paint();
            mLoTempTextPaint = createTextPaint(resources.getColor(R.color.text_2));
            mLoTempTextPaint.setTextSize(4);
            mLoTempTextPaint.setTextScaleX((float)(0.9));

            mCalendar = Calendar.getInstance();
            isMetric = true;
            isRound = false;

            requestUpdate();
        }

        private void requestUpdate(){
            Log.d(LOG_TAG,"requestUpdate:");
            PutDataMapRequest putDataMapRequest = PutDataMapRequest.create(getResources().getString(R.string.data_request));
            putDataMapRequest.getDataMap().putLong(getResources().getString(R.string.sent_time), System.currentTimeMillis());
            Wearable.DataApi.putDataItem(mGoogleApiClient, putDataMapRequest.asPutDataRequest());
        }

        @Override
        public void onDestroy() {
            mUpdateTimeHandler.removeMessages(MSG_UPDATE_TIME);
            super.onDestroy();
        }

        private Paint createTextPaint(int textColor) {
            Paint paint = new Paint();
            paint.setColor(textColor);
            paint.setTypeface(NORMAL_TYPEFACE);
            paint.setAntiAlias(true);
            return paint;
        }

        @Override
        public void onVisibilityChanged(boolean visible) {
            super.onVisibilityChanged(visible);

            if (visible) {
                registerReceiver();

                mGoogleApiClient.connect();

                // Update time zone in case it changed while we weren't visible.
                mCalendar.setTimeZone(TimeZone.getDefault());
            } else {
                unregisterReceiver();

                if (mGoogleApiClient != null && mGoogleApiClient.isConnected()) {
                    Wearable.DataApi.removeListener(mGoogleApiClient, this);
                    mGoogleApiClient.disconnect();
                }
            }

            // Whether the timer should be running depends on whether we're visible (as well as
            // whether we're in ambient mode), so we may need to start or stop the timer.
            updateTimer();
        }

        private void registerReceiver() {
            if (mRegisteredTimeZoneReceiver) {
                return;
            }
            mRegisteredTimeZoneReceiver = true;
            IntentFilter filter = new IntentFilter(Intent.ACTION_TIMEZONE_CHANGED);
            MyWatchFaceService.this.registerReceiver(mTimeZoneReceiver, filter);
        }

        private void unregisterReceiver() {
            if (!mRegisteredTimeZoneReceiver) {
                return;
            }
            mRegisteredTimeZoneReceiver = false;
            MyWatchFaceService.this.unregisterReceiver(mTimeZoneReceiver);
        }

        @Override
        public void onApplyWindowInsets(WindowInsets insets) {
            super.onApplyWindowInsets(insets);

            // Load resources that have alternate values for round watches.
            Resources resources = MyWatchFaceService.this.getResources();
            isRound = insets.isRound();
            mXOffset = resources.getDimension(isRound
                    ? R.dimen.digital_x_offset_round : R.dimen.digital_x_offset);
            float timeTextSize = resources.getDimension(isRound
                    ? R.dimen.digital_time_text_size_round : R.dimen.digital_time_text_size);
            float dateTextSize = resources.getDimension(isRound
                    ? R.dimen.digital_date_text_size_round : R.dimen.digital_date_text_size);
            float temperatureTextSize = resources.getDimension(isRound
                    ? R.dimen.digital_temperature_text_size_round : R.dimen.digital_temperature_text_size);

            mTimeTextPaint.setTextSize(timeTextSize);
            mDateTextPaint.setTextSize(dateTextSize);
            mHiTempTextPaint.setTextSize(temperatureTextSize);
            mLoTempTextPaint.setTextSize(temperatureTextSize);
        }

        @Override
        public void onPropertiesChanged(Bundle properties) {
            super.onPropertiesChanged(properties);
            mLowBitAmbient = properties.getBoolean(PROPERTY_LOW_BIT_AMBIENT, false);
        }

        @Override
        public void onTimeTick() {
            super.onTimeTick();
            invalidate();
        }

        @Override
        public void onAmbientModeChanged(boolean inAmbientMode) {
            super.onAmbientModeChanged(inAmbientMode);
            if (mAmbient != inAmbientMode) {
                mAmbient = inAmbientMode;
                if (mLowBitAmbient) {
                    mTimeTextPaint.setAntiAlias(!inAmbientMode);
                    mDateTextPaint.setAntiAlias(!inAmbientMode);
                    mHiTempTextPaint.setAntiAlias(!inAmbientMode);
                    mLoTempTextPaint.setAntiAlias(!inAmbientMode);
                }
                invalidate();
            }

            // Whether the timer should be running depends on whether we're visible (as well as
            // whether we're in ambient mode), so we may need to start or stop the timer.
            updateTimer();
        }

        /**
         * Captures tap event (and tap type) and toggles the background color if the user finishes
         * a tap.
         */
        @Override
        public void onTapCommand(int tapType, int x, int y, long eventTime) {
            switch (tapType) {
                case TAP_TYPE_TOUCH:
                    // The user has started touching the screen.
                    break;
                case TAP_TYPE_TOUCH_CANCEL:
                    // The user has started a different gesture or otherwise cancelled the tap.
                    break;
                case TAP_TYPE_TAP:
                    // The user has completed the tap gesture.
                    break;
            }
            invalidate();
        }

        @Override
        public void onDraw(Canvas canvas, Rect bounds) {
            long currentTime = System.currentTimeMillis();
            mCalendar.setTimeInMillis(currentTime);
            int hour = mCalendar.get(Calendar.HOUR);
            int minute = mCalendar.get(Calendar.MINUTE);
            int second = mCalendar.get(Calendar.SECOND);
            String day = weekdayFormat(mCalendar.get(Calendar.DAY_OF_WEEK));
            String month = monthFormat(mCalendar.get(Calendar.MONTH));
            int day_num = mCalendar.get(Calendar.DAY_OF_MONTH);
            int year = mCalendar.get(Calendar.YEAR);
            String tempHi = formatTemperature((mTemperatureHi == null) ? null : mTemperatureHi);
            String tempLo = formatTemperature((mTemperatureLo == null) ? null : mTemperatureLo);

            // Draw the background.
            if (isInAmbientMode()) {
                canvas.drawColor(Color.BLACK);
            } else {
                canvas.drawRect(0, 0, bounds.width(), bounds.height(), mBackgroundPaint);
            }

            // Draw H:MM in interactive & ambient modes.
            String time = String.format(Locale.US, "%d:%02d", hour, minute);
            float x = (float)(bounds.width()/2) - 60;
            float y = (float)(bounds.height()/2) - 30;
            canvas.drawText(time, x, y, mTimeTextPaint);

            String date = String.format(Locale.US, "%s, %s %02d %04d", day, month, day_num, year);
            y += 40;
            if(!isRound) {
                canvas.drawText(date, mXOffset + 10, y, mDateTextPaint);
            } else {
                canvas.drawText(date, mXOffset, y, mDateTextPaint);
            }

            Paint line = new Paint();
            line.setColor(getResources().getColor(R.color.text_2));
            y += 30;
            canvas.drawLine(x+30, y, x+90, y, line);

            y += 30;
            // re-center x;
            x = bounds.width()/2;

            canvas.drawText(tempHi, x-35, y+30, mHiTempTextPaint);
            canvas.drawText(tempLo, x+45, y+30, mLoTempTextPaint);

            if (mWeatherBitmap != null) {
                Paint weatherBitmapPaint = new Paint();
                canvas.drawBitmap(mWeatherBitmap, x-100, y-15, weatherBitmapPaint);
            }
        }

        private String weekdayFormat(int dayCode) {
            switch (dayCode) {
                case 1:
                    return getResources().getString(R.string.Sunday);
                case 2:
                    return getResources().getString(R.string.Monday);
                case 3:
                    return getResources().getString(R.string.Tuesday);
                case 4:
                    return getResources().getString(R.string.Wednesday);
                case 5:
                    return getResources().getString(R.string.Thursday);
                case 6:
                    return getResources().getString(R.string.Friday);
                case 7:
                    return getResources().getString(R.string.Saturday);
                default:
                    return getResources().getString(R.string.Unknown);
            }
        }

        private String monthFormat(int monthCode) {
            switch (monthCode) {
                case 0:
                    return getResources().getString(R.string.January);
                case 1:
                    return getResources().getString(R.string.February);
                case 2:
                    return getResources().getString(R.string.March);
                case 3:
                    return getResources().getString(R.string.April);
                case 4:
                    return getResources().getString(R.string.May);
                case 5:
                    return getResources().getString(R.string.June);
                case 6:
                    return getResources().getString(R.string.July);
                case 7:
                    return getResources().getString(R.string.August);
                case 8:
                    return getResources().getString(R.string.September);
                case 9:
                    return getResources().getString(R.string.October);
                case 10:
                    return getResources().getString(R.string.November);
                case 11:
                    return getResources().getString(R.string.December);
                case 12:
                    return getResources().getString(R.string.UnDecember);
                default:
                    return getResources().getString(R.string.Unknown);
            }
        }

        /**
         * Starts the {@link #mUpdateTimeHandler} timer if it should be running and isn't currently
         * or stops it if it shouldn't be running but currently is.
         */
        private void updateTimer() {
            mUpdateTimeHandler.removeMessages(MSG_UPDATE_TIME);
            if (shouldTimerBeRunning()) {
                mUpdateTimeHandler.sendEmptyMessage(MSG_UPDATE_TIME);
            }
        }

        /**
         * Returns whether the {@link #mUpdateTimeHandler} timer should be running. The timer should
         * only run when we're visible and in interactive mode.
         */
        private boolean shouldTimerBeRunning() {
            return isVisible() && !isInAmbientMode();
        }

        /**
         * Handle updating the time periodically in interactive mode.
         */
        private void handleUpdateTimeMessage() {
            invalidate();
            if (shouldTimerBeRunning()) {
                long timeMs = System.currentTimeMillis();
                long delayMs = INTERACTIVE_UPDATE_RATE_MS
                        - (timeMs % INTERACTIVE_UPDATE_RATE_MS);
                mUpdateTimeHandler.sendEmptyMessageDelayed(MSG_UPDATE_TIME, delayMs);
            }
        }

        //TODO: fill in useful data for these logs
        @Override //GoogleApiClient.ConnectionCallbacks
        public void onConnected(Bundle bundle) {
            Log.d(LOG_TAG, "onConnected: ");

            Wearable.DataApi.addListener(mGoogleApiClient, Engine.this);
        }

        @Override //GoogleApiClient.ConnectionCallbacks
        public void onConnectionSuspended(int i) {
            Log.d(LOG_TAG, "onConnectionSuspended: ");

        }

        @Override //DataApi.DataListener
        public void onDataChanged(DataEventBuffer dataEventBuffer) {
            Log.d(LOG_TAG, "onDataChanged: ");

            for (DataEvent event : dataEventBuffer) {
                if (event.getType() == DataEvent.TYPE_CHANGED && event.getDataItem().getUri().getPath().equals(getResources().getString(R.string.image_directory))) {
                    Log.d(LOG_TAG,"/image received");

                    final DataMapItem dataMapItem = DataMapItem.fromDataItem(event.getDataItem());
                    final Asset weatherArt = dataMapItem.getDataMap().getAsset(getResources().getString(R.string.weather_art));
                    mWeatherBitmap = convertAssetToBitmap(weatherArt);
                    mWeatherBitmap = Bitmap.createScaledBitmap(mWeatherBitmap, 60, 60, false);
                    mTemperatureHi = dataMapItem.getDataMap().getDouble(getResources().getString(R.string.high_temp));
                    mTemperatureLo = dataMapItem.getDataMap().getDouble(getResources().getString(R.string.low_temp));
                    isMetric = dataMapItem.getDataMap().getBoolean(getResources().getString(R.string.isMetric));
                    long time = dataMapItem.getDataMap().getLong(getResources().getString(R.string.sent_time));

                }
            }
        }

        private Bitmap convertAssetToBitmap(Asset asset) {
            Log.d(LOG_TAG, "converting asset to bitmap");
            if (asset == null) {
                throw new IllegalArgumentException("Asset was null");
            }
            //TODO: find out ideal time to wait
            ConnectionResult result = mGoogleApiClient.blockingConnect(5000, TimeUnit.MILLISECONDS);
            if (!result.isSuccess()) {
                return null;
            }

            InputStream assetStream = Wearable.DataApi.getFdForAsset(
                    mGoogleApiClient, asset).await().getInputStream();
            mGoogleApiClient.disconnect();

            if (assetStream == null) {
                return null;
            }

            return BitmapFactory.decodeStream(assetStream);
        }

        private String formatTemperature(Double temperature){
            if(temperature == null){
                return "";
            }
            if(!isMetric) {
                temperature = (temperature * 1.8) + 32;
            }
            // For presentation, assume the user doesn't care about tenths of a degree.
            return String.format(getResources().getString(R.string.format_temperature), temperature);
        }

        @Override //GoogleApiClient.OnConnectionFailedListener
        public void onConnectionFailed(@NonNull ConnectionResult connectionResult) {

            Log.d(LOG_TAG, "onConnectionFailed: " + connectionResult.getErrorCode());

        }
    }
}
